GLOBAL_ATTRIBUTES_KEYS = [
    "edition",
    "editionNumber",
    "centre",
    "centreDescription",
    "subCentre"
]
DATA_ATTRIBUTES_KEYS = [
    "paramId",
    "parameterCategory",
    "parameterNumber",
    "dataType",
    "numberOfPoints",
    "typeOfLevel",
    "gridType",
    "shortName",
    "parameterUnits",
    "units",
    "name",
    "cfName",
    "cfVarName",
    "missingValue",
    "totalNumber",
    "numberOfDirections",
    "numberOfFrequencies",
    "gridDefinitionDescription",
    "shapeOfTheEarth",
    "radius",
    "scaledValueOfEarthMajorAxis",
    "scaledValueOfEarthMinorAxis",
]
DATA_TIME_KEYS = [
    "dataDate",
    "dataTime",
    "stepType",
    "stepUnits",
    "startStep",
    "endStep",
    "stepRange",
    "step",
    "validityDate",
    "validityTime"
    "unitOfTimeRange",
    "year",
    "month",
    "day",
    "hour",
    "minute",
]
ENSEMBLE_KEYS = [
    "number", 
    "perturbationNumber"
]
VERTICAL_KEYS = ["level"]
GRID_TYPE_PROJ = {
    "regular_ll": [
        "Nx",
        "Ni",
        "iDirectionIncrementInDegrees",
        "iScansNegatively",
        "longitudeOfFirstGridPointInDegrees",
        "longitudeOfLastGridPointInDegrees",
        "Ny",
        "jDirectionIncrementInDegrees",
        "jPointsAreConsecutive",
        "jScansPositively",
        "latitudeOfFirstGridPointInDegrees",
        "latitudeOfLastGridPointInDegrees",
        "projectionCentreFlag"
    ],
    "rotated_ll": [
        "Nx",
        "Ny",
        "Ni", 
        "Nj",
        "angleOfRotationInDegrees",
        "iDirectionIncrementInDegrees",
        "iScansNegatively",
        "jDirectionIncrementInDegrees",
        "jPointsAreConsecutive",
        "jScansPositively",
        "latitudeOfFirstGridPointInDegrees",
        "latitudeOfLastGridPointInDegrees",
        "latitudeOfSouthernPoleInDegrees",
        "longitudeOfFirstGridPointInDegrees",
        "longitudeOfLastGridPointInDegrees",
        "longitudeOfSouthernPoleInDegrees",
    ],
    "reduced_ll": [
        "Ny",
        "Nj",
        "jDirectionIncrementInDegrees",
        "jPointsAreConsecutive",
        "jScansPositively",
        "latitudeOfFirstGridPointInDegrees",
        "latitudeOfLastGridPointInDegrees",
        "projectionCentreFlag"
    ],
    "regular_gg": [
        "Nx",
        "Ni", 
        "Nj",
        "iDirectionIncrementInDegrees",
        "iScansNegatively",
        "longitudeOfFirstGridPointInDegrees",
        "longitudeOfLastGridPointInDegrees",
        "N",
        "Ny",
        "projectionCentreFlag"
    ],
    "rotated_gg": [
        "Nx",
        "Ny",
        "Ni", 
        "Nj",
        "angleOfRotationInDegrees",
        "iDirectionIncrementInDegrees",
        "iScansNegatively",
        "jPointsAreConsecutive",
        "jScansPositively",
        "latitudeOfFirstGridPointInDegrees",
        "latitudeOfLastGridPointInDegrees",
        "latitudeOfSouthernPoleInDegrees",
        "longitudeOfFirstGridPointInDegrees",
        "longitudeOfLastGridPointInDegrees",
        "longitudeOfSouthernPoleInDegrees",
        "N",
    ],
    "lambert": [
        "Nx",
        "Ny",
        "Ni", 
        "Nj",
        "LaDInDegrees",
        "LoVInDegrees",
        "Latin2InDegrees",
        "Latin1InDegrees",
        "DxInMetres",
        "DyInMetres"
    ],
    "mercator":[
        "Nx",
        "Ny",
        "Ni", 
        "Nj",
        "LaD",
        "Latin",
        "latitudeOfFirstGridPointInDegrees",
        "latitudeOfLastGridPointInDegrees",
        "longitudeOfFirstGridPointInDegrees",
        "longitudeOfLastGridPointInDegrees",
        "truncateDegrees",
        "iScansPositively",
        "jScansPositively"
    ],
    "polar_stereographic": [
        "Nx",
        "Ny",
        "Ni", 
        "Nj",
        "projectionCentreFlag",
        "orientationOfTheGridInDegrees",
        "latitudeWhereDxAndDyAreSpecifiedInDegrees",
        "latitudeOfFirstGridPointInDegrees",
        "longitudeOfFirstGridPointInDegrees",
        "DxInMetres",
        "DyInMetres"
    ]
}

GRID_PROJ_KEYS = sorted(set(k for _, ks in GRID_TYPE_PROJ.items() for k in ks))
